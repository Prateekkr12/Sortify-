import dotenv from 'dotenv'
import mongoose from 'mongoose'
import User from './src/models/User.js'
import Email from './src/models/Email.js'
import jwt from 'jsonwebtoken'
import axios from 'axios'

dotenv.config()

const finalFix = async () => {
  try {
    console.log('üîß FINAL FIX - REMOVE DEBUG & FIX EMAILS\n')

    // Connect to MongoDB
    await mongoose.connect(process.env.MONGO_URI)
    console.log('‚úÖ Connected to MongoDB')

    // Find the correct user with most emails
    const users = await User.find({})
    let correctUser = null
    let maxEmails = 0

    for (const user of users) {
      const emailCount = await Email.countDocuments({ userId: user._id })
      if (emailCount > maxEmails) {
        maxEmails = emailCount
        correctUser = user
      }
    }

    if (!correctUser) {
      console.log('‚ùå No user found')
      return
    }

    console.log('‚úÖ Correct user found:', correctUser.email)
    console.log('‚úÖ User ID:', correctUser._id)
    console.log('‚úÖ Email count:', maxEmails)

    // Generate JWT token
    const token = jwt.sign({ id: correctUser._id }, process.env.JWT_SECRET)
    
    // Test API with correct token
    const baseURL = 'http://localhost:5000'
    const headers = { Authorization: `Bearer ${token}` }

    console.log('\nüì° TESTING API CONNECTION:')
    
    try {
      const emailsResponse = await axios.get(`${baseURL}/api/emails?page=1&limit=50`, { headers })
      console.log('‚úÖ Emails API:', emailsResponse.data.success ? 'SUCCESS' : 'FAILED')
      if (emailsResponse.data.success) {
        console.log(`   Emails returned: ${emailsResponse.data.emails?.length || 0}`)
        console.log(`   Total emails: ${emailsResponse.data.pagination?.total || 0}`)
        console.log(`   Current page: ${emailsResponse.data.pagination?.currentPage || 0}`)
        console.log(`   Total pages: ${emailsResponse.data.pagination?.totalPages || 0}`)
      }
    } catch (error) {
      console.log('‚ùå API Error:', error.response?.data?.message || error.message)
      console.log('‚ùå Make sure the server is running: npm start')
      return
    }

    // Test Gmail sync
    try {
      const syncResponse = await axios.post(`${baseURL}/api/emails/gmail/sync-all`, {}, { headers })
      console.log('‚úÖ Gmail Sync API:', syncResponse.data.success ? 'SUCCESS' : 'FAILED')
      if (syncResponse.data.success) {
        console.log(`   Synced: ${syncResponse.data.syncedCount || 0} emails`)
        console.log(`   Classified: ${syncResponse.data.classified || 0} emails`)
      }
    } catch (error) {
      console.log('‚ùå Gmail Sync Error:', error.response?.data?.message || error.message)
    }

    // Test Outlook sync (should return 501)
    try {
      const outlookResponse = await axios.post(`${baseURL}/api/emails/outlook/sync`, {}, { headers })
      console.log('‚ùå Outlook Sync:', 'Should have returned 501')
    } catch (error) {
      if (error.response?.status === 501) {
        console.log('‚úÖ Outlook Sync:', '501 Not Implemented (Expected)')
        console.log(`   Message: ${error.response.data.message}`)
      } else {
        console.log('‚ùå Outlook Sync Error:', error.response?.data?.message || error.message)
      }
    }

    console.log('\nüéØ FRONTEND FIX INSTRUCTIONS:')
    console.log('=' * 80)
    console.log('STEP 1: Open your browser and go to http://localhost:3000')
    console.log('STEP 2: Open Developer Tools (F12)')
    console.log('STEP 3: Go to Console tab')
    console.log('STEP 4: Clear any existing token:')
    console.log('   localStorage.clear()')
    console.log('STEP 5: Set the correct token:')
    console.log(`   localStorage.setItem("token", "${token}");`)
    console.log('STEP 6: Refresh the page (F5)')
    console.log('')
    console.log('EXPECTED RESULTS:')
    console.log(`‚úÖ Should show ${maxEmails} emails total`)
    console.log('‚úÖ Should show 50 emails per page')
    console.log(`‚úÖ Should show ${Math.ceil(maxEmails / 50)} pages total`)
    console.log('‚úÖ No debug info component visible')
    console.log('‚úÖ Gmail sync button works (green)')
    console.log('‚úÖ Outlook sync button disabled (grey, "Coming Soon")')
    console.log('=' * 80)

    console.log('\n‚úÖ FIXES APPLIED:')
    console.log('‚úÖ Removed DebugInfo component from Dashboard')
    console.log('‚úÖ Deleted DebugInfo.jsx file')
    console.log('‚úÖ Server is running and API is working')
    console.log('‚úÖ Gmail full sync implemented')
    console.log('‚úÖ Outlook "Coming Soon" implemented')
    console.log('‚úÖ Frontend token fix provided')

  } catch (error) {
    console.error('‚ùå Fix failed:', error)
  } finally {
    await mongoose.disconnect()
    console.log('\nüîå Disconnected from MongoDB')
  }
}

finalFix()
